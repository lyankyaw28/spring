IOC Container
	IOC Container က object မ်ားရဲ႕ instantiate, configure and assemble မ်ားကို ကိုယ္စားၿပဳတယ္
	IOC Container က xml file ကတစ္ဆင့္ information မ်ားရရွိၿပီး အဲ့အတိုင္း အလုပ္လုပ္တယ္
	သူ႕မွာ အလုပ္ ၃ ခုရွိတယ္
		application class ကို instantiate လုပ္ရန္
		object ကိုိ configure လုပ္ရန္
		objects မ်ားအၾကား dependencies တည္ေဆာက္ရန္တို႔ၿဖစ္တယ္
		
IOC အမ်ိဳးအစား ၂ မ်ိဳးရွိတယ္
	1.Bean Factory
	2.ApplicationContext
	
ဘာကြာလဲဆိုေတာ့
	ApplicationContext ဆိုတာက Bean Factory ကို မြမ္းမံထားတဲ့ သေဘာမ်ိဳးၿဖစ္တယ္
	additional functions မ်ားေပါင္းထည့္ထားတယ္ (simple integration with Spring's AOP, message resource handling (for I18N), 
	event propagation, application layer specific context (e.g. WebApplicationContext) for web application)
	ထို႕ေၾကာင္ ApplicationContext က ပိုေကာင္းတယ္
	
BeanFactory ကို အသံုးၿပဳၿခင္း
	XmlBeanFactory ဆိုတာ BeanFactory interface ကို implementation လုပ္ထားၿခင္းၿဖစ္တယ္
	BeanFactory ကို အသံုးၿပဳမယ္ဆိုရင္ XmlBeanFactory class ရဲ႕ instance ကို create လုပ္ဖို႔လိုမယ္
	Resource resource=new ClassPathResource("applicationContext.xml");  
	BeanFactory factory=new XmlBeanFactory(resource);
	XmlBeanFactory ရဲ႕ constructor က resource object ကိုလက္ခံထားတယ္ ဘာလို႔လဲဆိုေတာ့ beanFactory object ကို create လုပ္ဖို႔လိုတယ္အတြက္ၿဖစ္တယ္
	
ApplicationContext ကိုအသံုးၿပဳၿခင္း
	ClassPathXmlApplicationContext class  ဆိုတာ ApplicationContext interface ကို implementation လုပ္ထားၿခင္းၿဖစ္တယ္
	ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml"); 
	ClassPathXmlApplicationContext က xml file name string ကိုလက္ခံထားတယ္ ဘာလို႔လဲဆိုေတာ့ ApplicationContext object ကို create လုပ္ဖို႔အတြက္ၿဖစ္တယ္
*************************************************************************************************************************	
Dependency Injection in Spring
	Dependency Injection ဆိုတာ design pattern တစ္ခုၿဖစ္ၿပီးေတာ့ သူက code ေတြထဲက Dependency ေတြကို ဖယ္ရွားေပးတယ္
	သူက code loosely coupled ၿဖစ္ေစတယ္
	
Dependency Lookup(Dependency Injection နဲ႔ ဆန္႔က်င္ဘက္)
	get the resource(instance of A class) directly by new keyword
	A obj = new AImpl();  
	
	get the resource (instance of A class) by calling the static factory method getA()
	A obj = A.getA();  
	
	JNDI (Java Naming Directory Interface)
	Context ctx = new InitialContext();  
	Context environmentCtx = (Context) ctx.lookup("java:comp/env");  
	A obj = (A)environmentCtx.lookup("A");
	
Dependency Lookup ရဲ႕ၿပသနာ
	အၾကီးစား ၿပသနာ ၂ ခုရွိတယ္
	1.code tightly coupled ၿဖစ္ေစတယ္။resource က တစ္ခုခု change လုိက္မယ္ဆိုရင္ code ေတြကို အမ်ားၾကီးလိုက္ၿပင္ဖို႔လိုလာၿပီ
	2.testing လုပ္ရတာမလြယ္ကူဘူး
	
Dependency Injection
	ဒီမွာက်ေတာ့ information ကို external resource ကေနတစ္ဆင့္ေပးတယ္ xml file လိုဟာမ်ိဳးကေနတစ္ဆင့္
	သူကအထက္က ၿပသနာႏွစ္ခုစလံုးကို ေၿပလည္ေစတယ္
	
Dependency Injection ကို spring framework မွာနည္းလမ္း ၂ မ်ိဳးနဲ႔လုပ္ေဆာင္ႏိုင္တယ္
	1.By Constructor
	2.By Setter method
*************************************************************************************************************************
Dependency Injection by Constructor Example
	1.primitive and String-based values
	2.Dependent object (contained object)
	3.Collection values etc.
	
	ဥပမာမ်ားေရးထားေသာ package name မ်ား
	1.Primitive and String-based values(constructor_injection_primitive_and_string)
			
	2.Dependent Object(constructor_injection_dependent_obj)	
			
	3.Collection မွာ ၃ မ်ိဳးၿဖစ္ႏိုင္တယ္
		1.List
		2.Set
		3.Map
			ေနာက္ထပ္ ၂ မ်ိဳး ထပ္ကြဲေသးတယ္
				1.String based
					1.1.String based List(constructor_injection_string_list)
					1.2.String base Map(constructor_injection_string_map)
				2.Non-string based
					2.1.Non-String based List(constructor_injection_non_string_list)
					2.2.String base Map(constructor_injection_non_string_map)
********************************************************************************************************************
Dependency Injection by setter method
	1.primitive and String-based values
	2.Dependent object (contained object)
	3.Collection values etc.
	
	ဥပမာမ်ားေရးထားေသာ package name မ်ား
	1.Primitive and String-based values(setter_injection_primitive_and_string)
			
	2.Dependent Object(setter_injection_dependent_obj)	
			
	3.Collection မွာ ၃ မ်ိဳးၿဖစ္ႏိုင္တယ္
		1.List
		2.Set
		3.Map
			ေနာက္ထပ္ ၂ မ်ိဳး ထပ္ကြဲေသးတယ္
				1.String based
					1.1.String based List(setter_injection_string_list)
					1.2.String base Map(setter_injection_string_map)
				2.Non-string based
					2.1.Non-String based List(setter_injection_non_string_list)
					2.2.String base Map(setter_injection_non_string_map)
*********************************************************************************************************
Difference between constructor and setter injection
	1.Partial dependency: ဆိုလိုတာက properties ေတြအမ်ားၾကီးရွိတယ္ class တစ္ခုတည္းမွာ 
	အဲ့မွာ field တစ္ခုတည္းကိုပဲ inject လုပ္ခ်င္တယ္ဆိုရင္ constructor က သိပ္အဆင္မေၿပေတာ့ဘူး မရမကလုပ္လို႔ေတာ့ရတယ္
	အဲ့တာဆို constructor ေတြအမ်ားၾကီးလိုက္ေရးရလိမ့္မယ္ အဲ့လိုဆိုေတာ့ setter ကပဲ အဆင္ေၿပလိမ့္မယ္
	
	2.Overriding: setter injection ေရာ constructor injection ေရာ ႏွစ္ခုလံုးေရးထားတယ္ဆိုရင္ IOC container ၾကီးက setter method နဲ႔ပဲ
	injection လုပ္သြားလိမ့္မယ္
	
	3.Changes:value change ရတာလည္း setter injection ကပိုလြယ္တယ္ ဘာလို႔လဲဆိုေတာ့ constructor လိုမ်ိဳး new instance ေတြေဆာက္ေနစရာမလိုဘူး
	ဒါေၾကာင့္ setter injection ကပိုၿပီးေတာ့ သံုးရတာအဆင္ေၿပေစတယ္
*********************************************************************************************************
Autowiring in Spring
	Spring Framework မွာ autowire နဲ႔လည္း dependency injection လုပ္လို႔ရတယ္
	ဒါေပမယ့္ သူကလည္း setter ဒါမွမဟုတ္ constructor ကို သံုးတာပဲ
	Autowire က primitive and string values ေတြကုိေတာ့ လုပ္လို႔မရဘူး reference တစ္ခုပဲလုပ္လို႔ရတယ္
	
ေကာင္းက်ိဳး
	code နည္းနည္းေလးပဲေရးရတယ္
	
မေကာင္းတဲ့အခ်က္
	primitive and string values ေတြအတြက္ သံုးလို႔မရဘူး
	
Autowiring Modes
	Mode 6 မ်ိဳးရွိတယ္
	အဲ့မွာ မွတ္ထားရမွာက အရင္ DI မ်ားကို run တုန္းကဆိုရင္ jar file ၃ file ပဲလိုတယ္
	1.com.springsource.org.apache.commons.logging-1.1.1.jar
	2.org.springframework.beans-3.0.1.RELEASE-A.jar
	3.org.springframework.core-3.0.1.RELEASE-A.jar
	
	autowire စမ္းမယ္ဆိုရင္ org.springframework.context.jar ကိုထည့္ေပးရမယ္
	
	1) byName autowiring mode
		bean id နဲ႔ class name ကတူရမယ္ အၾကီးအေသးေတာ့ တူစရာမလို
		အဲ့ေကာင္က setter injection လုပ္သြားတယ္
		<bean id="b" class="org.sssit.B"></bean>  
		<bean id="a" class="org.sssit.A" autowire="byName"></bean>  
		
	2) byType autowiring mode
		bean id နဲ႔ class name က မတူလည္းရတယ္
		<bean id="b1" class="org.sssit.B"></bean>  
		<bean id="a" class="org.sssit.A" autowire="byType"></bean>  
		ဒါေပမယ့္ type တစ္ခုတည္းမွာ bean ေတြအမ်ားၾကီး ရွိေနရင္ေတာ့ exception ပစ္သြားလိမ့္မယ္
		<bean id="b1" class="org.sssit.B"></bean>  
		<bean id="b2" class="org.sssit.B"></bean>  
		<bean id="a" class="org.sssit.A" autowire="byName"></bean>  
		
	3) constructor autowiring mode
		inject လုပ္မယ့္ class ထဲမွာ constructor တစ္ခုထက္ပိုၿပီး ရွိေနတယ္ဆိုရင္ spring container က parameter အမ်ားဆံုး constructor ကို inject လုပ္တယ္
		<bean id="b" class="org.sssit.B"></bean>  
		<bean id="a" class="org.sssit.A" autowire="constructor"></bean>  
		
	4) no autowiring mode
		autowire no ဆိုရင္ DI မလုပ္ေတာ့ဘူးဆိုတဲ့ အဓိပၸါတယ္ၿဖစ္သြားလိမ့္မယ္
		<bean id="b" class="org.sssit.B"></bean>  
		<bean id="a" class="org.sssit.A" autowire="no"></bean>
****************************************************************************************************************	
Dependency Injection with Factory Method in Spring
	 1.factory-method:
	 2.factory-bean:
	 
	 //code sample
	 public class A {  
		public static A getA(){//factory method  
		    return new A();  
		}  
	} 
	 
	1.Factory Method Types (အဲ့လိုဆိုရင္ applicatonContext.xml file ထဲက bean မွာ attribute ၃ မ်ိဳး ၿဖစ္ေနလိမ့္မယ္ id,class,factory method တို႔ၿဖစ္တယ္)
		၃ မ်ိဳးရွိတယ္
			1.1. သူက static factory method ၿဖစ္တယ္ သူ႕ကိုယ္ပိုင္ class ရဲ႕ reference ကို return ၿပန္ေပးလိမ့္မယ္
					သူက singleton design pattern ကို သံုးထားတယ္
					<bean id="a" class="com.javatpoint.A" factory-method="getA"></bean>
					သူ႕ရဲ႕ factory method ၿဖစ္တဲ့ getA ထဲမွာ A class ကို instance လုပ္ထားတဲ့ object ကို return ၿပန္ထားတဲ့အတြက္ type1 ၿဖစ္ေစတယ္
					
			1.2. သူလည္း static factory method ၿဖစ္တယ္ ဒါေပမယ့္သူက တစ္ၿခား class ရဲ႕ reference ကို return ၿပန္ေပးလိမ့္မယ္
					ဘယ္ reference ဆိုတာကို မသိဘူး runtime က်မွ ဆံုးၿဖတ္လိမ့္မယ္
					<bean id="b" class="com.javatpoint.A" factory-method="getB"></bean>  
					သူ႕ရဲ႕ factory method မွာက တစ္ၿခား class တစ္ခုရဲ႕ instance object ၾကီးကို return ၿပန္ထားလို႔ type2 ၿဖစ္ေစတယ္
					
			1.3 သူကေတာ့ non-static factory method ၿဖစ္တယ္ သူကလည္း တစ္ၿခား class ရဲ႕ reference ကို return ၿပန္ေပးလိမ့္မယ္
					ဘယ္ reference ဆိုတာကို မသိဘူး runtime က်မွ ဆံုးၿဖတ္လိမ့္မယ္
					<bean id="a" class="com.javatpoint.A"></bean>  
					<bean id="b" class="com.javatpoint.A" factory-method="getB" factory-bean="a"></bean>  